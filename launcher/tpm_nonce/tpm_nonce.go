// Package tpmnonce implements the V2 TPM nonce spec.
package tpmnonce

import (
	"bytes"
	"crypto/sha256"
	"fmt"
	"sort"
	"strings"
)

const (
	// ChallengePrefix is the prefix on all challenges generated by the Attestation Service.
	ChallengePrefix = "GoogAttestV1"
	// NoncePrefix is the prefix on the nonce given to the TPM before the quote is generated.
	NoncePrefix = "GoogAttestV2"
)

// GenerateTpmNonce generates the nonce to give to the TPM before getting a quote.
// TpmNonce = noncePrefix | SHA256(C | SHA256(sort[applyPrefix(arr)])
// C == GoogAttestV1 | 128bits entropy
func GenerateTpmNonce(challenge []byte, nonces [][]byte) ([]byte, error) {
	if challenge == nil || !strings.HasPrefix(string(challenge), ChallengePrefix) {
		return nil, fmt.Errorf("expected GoogAttestV1 challenge, got %v", challenge)
	}

	// No custom nonces specified is OK.
	if nonces == nil {
		nonces = [][]byte{}
	}

	// Prefix the length of each nonce to itself.
	for i, s := range nonces {
		l := byte(len(s))
		nonces[i] = append([]byte{l}, s...)
	}

	// Sort nonces.
	sort.Slice(nonces, func(i, j int) bool {
		return bytes.Compare(nonces[i], nonces[j]) == -1
	})

	// Concatenate nonces.
	cat := []byte{}
	for _, v := range nonces {
		cat = append(cat, v...)
	}

	// Take the SHA256 sum of the concatenated nonces.
	nonceHash := sha256.Sum256(cat)

	// Concatenate the challenge with the hashed nonces.
	challengeCat := append(challenge, nonceHash[:]...)

	// Hash the newly concatenated challenge.
	challengeHash := sha256.Sum256(challengeCat)

	// Return the noncePrefix concatenated with the hashed challenge.
	return append([]byte(NoncePrefix), challengeHash[:]...), nil
}
