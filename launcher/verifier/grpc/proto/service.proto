// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package attestation_verifier.v0;

import "google/api/annotations.proto";
import "attest.proto";

option go_package = "github.com/google/go-tpm-tools/launcher/internal/verifier/proto/attestation_verifier/v0";

message GetParamsRequest {}

message GetParamsResponse {
  // Connection ID to be used with a subsequent VerifyRequest. Required.
  string conn_id = 1;

  // Nonce that should be used when generating the attestation sent with a
  // VerifyRequest. Required.
  bytes nonce = 2;

  // Audience that should be used when generating Service Account ID Tokens sent
  // with a subsequent VerifyRequest. Required.
  //
  // Format: https://www.googleapis.com/attestation_verifier/v0/conn_id/12345
  string audience = 3;
}

message VerifyRequest {
  // Connection ID from a previous GetParamsResponse. Required.
  string conn_id = 1;

  // go-tpm-tools attestation that will be verified by the server, which must
  // use the nonce received in a previous GetParamsResponse. Required.
  attest.Attestation attestation = 2;

  // The Google ID Token for the principal running in the VM. Generated from the
  // Metadata Server with the requested `audience`. Optional.
  repeated bytes principal_id_tokens = 3;
}

message VerifyResponse {
  // OIDC ID token containing the claims created by the server. Required.
  bytes claims_token = 1;
}

service AttestationVerifier {
  // Endpoint to request attestation parameters (including nonce and audience).
  rpc GetParams(GetParamsRequest) returns (GetParamsResponse) {
    option (google.api.http) = {
      post: "/v0/getParams"
      body: "*"
    };
  }

  // Endpoint to verify the attestation and return an OIDC/JWT token.
  rpc Verify(VerifyRequest) returns (VerifyResponse) {
    option (google.api.http) = {
      post: "/v0/verify"
      body: "*"
    };
  }
}
