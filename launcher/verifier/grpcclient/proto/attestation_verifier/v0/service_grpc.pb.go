// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttestationVerifierClient is the client API for AttestationVerifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestationVerifierClient interface {
	// Endpoint to request attestation parameters (including nonce and audience).
	GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error)
	// Endpoint to verify the attestation and return an OIDC/JWT token.
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type attestationVerifierClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationVerifierClient(cc grpc.ClientConnInterface) AttestationVerifierClient {
	return &attestationVerifierClient{cc}
}

func (c *attestationVerifierClient) GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error) {
	out := new(GetParamsResponse)
	err := c.cc.Invoke(ctx, "/attestation_verifier.v0.AttestationVerifier/GetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationVerifierClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/attestation_verifier.v0.AttestationVerifier/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationVerifierServer is the server API for AttestationVerifier service.
// All implementations should embed UnimplementedAttestationVerifierServer
// for forward compatibility
type AttestationVerifierServer interface {
	// Endpoint to request attestation parameters (including nonce and audience).
	GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error)
	// Endpoint to verify the attestation and return an OIDC/JWT token.
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
}

// UnimplementedAttestationVerifierServer should be embedded to have forward compatible implementations.
type UnimplementedAttestationVerifierServer struct {
}

func (UnimplementedAttestationVerifierServer) GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedAttestationVerifierServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

// UnsafeAttestationVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestationVerifierServer will
// result in compilation errors.
type UnsafeAttestationVerifierServer interface {
	mustEmbedUnimplementedAttestationVerifierServer()
}

func RegisterAttestationVerifierServer(s grpc.ServiceRegistrar, srv AttestationVerifierServer) {
	s.RegisterService(&AttestationVerifier_ServiceDesc, srv)
}

func _AttestationVerifier_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationVerifierServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestation_verifier.v0.AttestationVerifier/GetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationVerifierServer).GetParams(ctx, req.(*GetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationVerifier_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationVerifierServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestation_verifier.v0.AttestationVerifier/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationVerifierServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttestationVerifier_ServiceDesc is the grpc.ServiceDesc for AttestationVerifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttestationVerifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attestation_verifier.v0.AttestationVerifier",
	HandlerType: (*AttestationVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParams",
			Handler:    _AttestationVerifier_GetParams_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _AttestationVerifier_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
