substitutions:
  '_IMAGE_NAME': ''
  '_IMAGE_PROJECT': ''
  '_CLEANUP': 'true'
  '_VM_NAME_PREFIX': 'cs-gpu-test'
  '_ZONE': 'us-central1-f'
  '_WORKLOAD_IMAGE': 'us-west1-docker.pkg.dev/confidential-space-images-dev/cs-integ-test-images/gpu/cuda-vector-add:latest'
steps:
- name: 'gcr.io/cloud-builders/gcloud'
  id: CreateShieldedVMWithSingleGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_gpu_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}',
          '-z', '${_ZONE}',
          '-v', 'n1-standard-4',
          '-g', 'nvidia-tesla-t4',
          '-c', '1'
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id: CreateShieldedVMWithMultipleGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_gpu_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-mul',
          '-z', '${_ZONE}',
          '-v', 'n1-standard-4',
          '-g', 'nvidia-tesla-t4',
          '-c', '2'
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id: CreateShieldedVMWithUnsupportedGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_gpu_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-unsup',
          '-z', '${_ZONE}',
          '-v', 'n1-standard-4',
          '-g', 'nvidia-tesla-p100',
          '-c', '1'
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id: CreateShieldedVMWithNoGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-nogpu',
          '-z', '${_ZONE}',
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id: SingleGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_workload.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: MultipleGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_workload.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-mul', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: UnsupportedGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_unsupported_gputype.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-unsup', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_nogpu.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-nogpu', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: SingleGpuCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: MultipleGpuCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-mul', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: UnsupportedGpuVmCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-unsup', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoGpuVmCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-nogpu', '${_ZONE}']
# Must come after cleanup.
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoGpuVmCheckFailure
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['check_failure.sh']

# options:
#   pool:
#     name: 'projects/confidential-space-images-dev/locations/us-west1/workerPools/cs-image-build-vpc'
